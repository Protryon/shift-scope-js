"use strict";

var _extends = function (child, parent) {
  child.prototype = Object.create(parent.prototype, {
    constructor: {
      value: child,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  child.__proto__ = parent;
};

var DeclarationType = function DeclarationType(name, isBlockScoped) {
  this.name = name;
  this.isBlockScoped = !!isBlockScoped;
  this.isFunctionScoped = !isBlockScoped;
};

exports.DeclarationType = DeclarationType;
var BlockScopedDeclaration = (function (DeclarationType) {
  var BlockScopedDeclaration = function BlockScopedDeclaration(name) {
    DeclarationType.call(this, name, true);
  };

  _extends(BlockScopedDeclaration, DeclarationType);

  return BlockScopedDeclaration;
})(DeclarationType);

exports.BlockScopedDeclaration = BlockScopedDeclaration;
var FunctionScopedDeclaration = (function (DeclarationType) {
  var FunctionScopedDeclaration = function FunctionScopedDeclaration(name) {
    DeclarationType.call(this, name, false);
  };

  _extends(FunctionScopedDeclaration, DeclarationType);

  return FunctionScopedDeclaration;
})(DeclarationType);

exports.FunctionScopedDeclaration = FunctionScopedDeclaration;


DeclarationType.VAR = new FunctionScopedDeclaration("var");
DeclarationType.CONST = new BlockScopedDeclaration("const");
DeclarationType.LET = new BlockScopedDeclaration("let");
DeclarationType.FUNCTION_NAME = new FunctionScopedDeclaration("function name");
DeclarationType.PARAMETER = new FunctionScopedDeclaration("parameter");
DeclarationType.CATCH = new BlockScopedDeclaration("catch");

var Declaration = (function () {
  var Declaration = function Declaration(node, type) {
    this.node = node;
    this.type = type;
    // for backwards compatibility with 1.x:
    this.kind = type;
  };

  Declaration.fromVarDeclKind = function (node, variableDeclarationKind) {
    switch (variableDeclarationKind) {
      case "var":
        return new VarDeclaration(node);
      case "const":
        return new ConstDeclaration(node);
      case "let":
        return new LetDeclaration(node);
      default:
        throw new Error("Invalid VariableDeclarationKind: " + JSON.stringify(variableDeclarationKind));
    }
  };

  return Declaration;
})();

exports.Declaration = Declaration;
var VarDeclaration = (function (Declaration) {
  var VarDeclaration = function VarDeclaration(node) {
    Declaration.call(this, node, DeclarationType.VAR);
  };

  _extends(VarDeclaration, Declaration);

  return VarDeclaration;
})(Declaration);

exports.VarDeclaration = VarDeclaration;
var ConstDeclaration = (function (Declaration) {
  var ConstDeclaration = function ConstDeclaration(node) {
    Declaration.call(this, node, DeclarationType.CONST);
  };

  _extends(ConstDeclaration, Declaration);

  return ConstDeclaration;
})(Declaration);

exports.ConstDeclaration = ConstDeclaration;
var LetDeclaration = (function (Declaration) {
  var LetDeclaration = function LetDeclaration(node) {
    Declaration.call(this, node, DeclarationType.LET);
  };

  _extends(LetDeclaration, Declaration);

  return LetDeclaration;
})(Declaration);

exports.LetDeclaration = LetDeclaration;
var FunctionNameDeclaration = (function (Declaration) {
  var FunctionNameDeclaration = function FunctionNameDeclaration(node) {
    Declaration.call(this, node, DeclarationType.FUNCTION_NAME);
  };

  _extends(FunctionNameDeclaration, Declaration);

  return FunctionNameDeclaration;
})(Declaration);

exports.FunctionNameDeclaration = FunctionNameDeclaration;
var ParameterDeclaration = (function (Declaration) {
  var ParameterDeclaration = function ParameterDeclaration(node) {
    Declaration.call(this, node, DeclarationType.PARAMETER);
  };

  _extends(ParameterDeclaration, Declaration);

  return ParameterDeclaration;
})(Declaration);

exports.ParameterDeclaration = ParameterDeclaration;
var CatchDeclaration = (function (Declaration) {
  var CatchDeclaration = function CatchDeclaration(node) {
    Declaration.call(this, node, DeclarationType.CATCH);
  };

  _extends(CatchDeclaration, Declaration);

  return CatchDeclaration;
})(Declaration);

exports.CatchDeclaration = CatchDeclaration;
//# sourceMappingURL=data:application/json;base64,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RXZDLElBQUksRUFBRSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7R0FDcEM7O1dBSFUsZ0JBQWdCLEVBQVMsV0FBVzs7U0FBcEMsZ0JBQWdCO0dBQVMsV0FBVzs7UUFBcEMsZ0JBQWdCLEdBQWhCLGdCQUFnQiIsImZpbGUiOiJzcmMvZGVjbGFyYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE0IFNoYXBlIFNlY3VyaXR5LCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKVxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGNsYXNzIERlY2xhcmF0aW9uVHlwZSB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIGlzQmxvY2tTY29wZWQpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuaXNCbG9ja1Njb3BlZCA9ICEhaXNCbG9ja1Njb3BlZDtcbiAgICB0aGlzLmlzRnVuY3Rpb25TY29wZWQgPSAhaXNCbG9ja1Njb3BlZDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmxvY2tTY29wZWREZWNsYXJhdGlvbiBleHRlbmRzIERlY2xhcmF0aW9uVHlwZSB7XG4gIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICBzdXBlcihuYW1lLCB0cnVlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25TY29wZWREZWNsYXJhdGlvbiBleHRlbmRzIERlY2xhcmF0aW9uVHlwZSB7XG4gIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICBzdXBlcihuYW1lLCBmYWxzZSk7XG4gIH1cbn1cblxuRGVjbGFyYXRpb25UeXBlLlZBUiA9IG5ldyBGdW5jdGlvblNjb3BlZERlY2xhcmF0aW9uKFwidmFyXCIpO1xuRGVjbGFyYXRpb25UeXBlLkNPTlNUID0gbmV3IEJsb2NrU2NvcGVkRGVjbGFyYXRpb24oXCJjb25zdFwiKTtcbkRlY2xhcmF0aW9uVHlwZS5MRVQgPSBuZXcgQmxvY2tTY29wZWREZWNsYXJhdGlvbihcImxldFwiKTtcbkRlY2xhcmF0aW9uVHlwZS5GVU5DVElPTl9OQU1FID0gbmV3IEZ1bmN0aW9uU2NvcGVkRGVjbGFyYXRpb24oXCJmdW5jdGlvbiBuYW1lXCIpO1xuRGVjbGFyYXRpb25UeXBlLlBBUkFNRVRFUiA9IG5ldyBGdW5jdGlvblNjb3BlZERlY2xhcmF0aW9uKFwicGFyYW1ldGVyXCIpO1xuRGVjbGFyYXRpb25UeXBlLkNBVENIID0gbmV3IEJsb2NrU2NvcGVkRGVjbGFyYXRpb24oXCJjYXRjaFwiKTtcblxuZXhwb3J0IGNsYXNzIERlY2xhcmF0aW9uIHtcbiAgY29uc3RydWN0b3Iobm9kZSwgdHlwZSkge1xuICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAvLyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCAxLng6XG4gICAgdGhpcy5raW5kID0gdHlwZTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tVmFyRGVjbEtpbmQobm9kZSwgdmFyaWFibGVEZWNsYXJhdGlvbktpbmQpIHtcbiAgICBzd2l0Y2ggKHZhcmlhYmxlRGVjbGFyYXRpb25LaW5kKSB7XG4gICAgY2FzZSBcInZhclwiOlxuICAgICAgcmV0dXJuIG5ldyBWYXJEZWNsYXJhdGlvbihub2RlKTtcbiAgICBjYXNlIFwiY29uc3RcIjpcbiAgICAgIHJldHVybiBuZXcgQ29uc3REZWNsYXJhdGlvbihub2RlKTtcbiAgICBjYXNlIFwibGV0XCI6XG4gICAgICByZXR1cm4gbmV3IExldERlY2xhcmF0aW9uKG5vZGUpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIFZhcmlhYmxlRGVjbGFyYXRpb25LaW5kOiBcIiArIEpTT04uc3RyaW5naWZ5KHZhcmlhYmxlRGVjbGFyYXRpb25LaW5kKSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWYXJEZWNsYXJhdGlvbiBleHRlbmRzIERlY2xhcmF0aW9uIHtcbiAgY29uc3RydWN0b3Iobm9kZSkge1xuICAgIHN1cGVyKG5vZGUsIERlY2xhcmF0aW9uVHlwZS5WQVIpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25zdERlY2xhcmF0aW9uIGV4dGVuZHMgRGVjbGFyYXRpb24ge1xuICBjb25zdHJ1Y3Rvcihub2RlKSB7XG4gICAgc3VwZXIobm9kZSwgRGVjbGFyYXRpb25UeXBlLkNPTlNUKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTGV0RGVjbGFyYXRpb24gZXh0ZW5kcyBEZWNsYXJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG5vZGUpIHtcbiAgICBzdXBlcihub2RlLCBEZWNsYXJhdGlvblR5cGUuTEVUKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25OYW1lRGVjbGFyYXRpb24gZXh0ZW5kcyBEZWNsYXJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG5vZGUpIHtcbiAgICBzdXBlcihub2RlLCBEZWNsYXJhdGlvblR5cGUuRlVOQ1RJT05fTkFNRSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBhcmFtZXRlckRlY2xhcmF0aW9uIGV4dGVuZHMgRGVjbGFyYXRpb24ge1xuICBjb25zdHJ1Y3Rvcihub2RlKSB7XG4gICAgc3VwZXIobm9kZSwgRGVjbGFyYXRpb25UeXBlLlBBUkFNRVRFUik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENhdGNoRGVjbGFyYXRpb24gZXh0ZW5kcyBEZWNsYXJhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG5vZGUpIHtcbiAgICBzdXBlcihub2RlLCBEZWNsYXJhdGlvblR5cGUuQ0FUQ0gpO1xuICB9XG59XG4iXX0=