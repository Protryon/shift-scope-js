"use strict";

var _extends = function (child, parent) {
  child.prototype = Object.create(parent.prototype, {
    constructor: {
      value: child,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  child.__proto__ = parent;
};

var Accessibility = function Accessibility(isRead, isWrite) {
  this.isRead = !!isRead;
  this.isWrite = !!isWrite;
  this.isReadWrite = !!(isRead && isWrite);
};

exports.Accessibility = Accessibility;


Accessibility.READ = new Accessibility(true, false);
Accessibility.WRITE = new Accessibility(false, true);
Accessibility.READWRITE = new Accessibility(true, true);

var Reference = function Reference(node, accessibility) {
  this.node = node;
  this.accessibility = accessibility;
};

var ReadReference = (function (Reference) {
  var ReadReference = function ReadReference(node) {
    Reference.call(this, node, Accessibility.READ);
  };

  _extends(ReadReference, Reference);

  return ReadReference;
})(Reference);

exports.ReadReference = ReadReference;
var WriteReference = (function (Reference) {
  var WriteReference = function WriteReference(node) {
    Reference.call(this, node, Accessibility.WRITE);
  };

  _extends(WriteReference, Reference);

  return WriteReference;
})(Reference);

exports.WriteReference = WriteReference;
var ReadWriteReference = (function (Reference) {
  var ReadWriteReference = function ReadWriteReference(node) {
    Reference.call(this, node, Accessibility.READWRITE);
  };

  _extends(ReadWriteReference, Reference);

  return ReadWriteReference;
})(Reference);

exports.ReadWriteReference = ReadWriteReference;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9yZWZlcmVuY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7SUFnQmEsYUFBYSxHQUNiLFNBREEsYUFBYSxDQUNaLE1BQU0sRUFBRSxPQUFPLEVBQUU7QUFDM0IsTUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3ZCLE1BQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUN6QixNQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQztDQUMxQzs7UUFMVSxhQUFhLEdBQWIsYUFBYTs7O0FBUTFCLGFBQWEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3BELGFBQWEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxhQUFhLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3JELGFBQWEsQ0FBQyxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDOztJQUVsRCxTQUFTLEdBQ0YsU0FEUCxTQUFTLENBQ0QsSUFBSSxFQUFFLGFBQWEsRUFBRTtBQUMvQixNQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNqQixNQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztDQUNwQzs7SUFHVSxhQUFhLGNBQVMsU0FBUztNQUEvQixhQUFhLEdBQ2IsU0FEQSxhQUFhLENBQ1osSUFBSSxFQUFFO0FBRGUsQUFFL0IsYUFGd0MsWUFFbEMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUNqQzs7V0FIVSxhQUFhLEVBQVMsU0FBUzs7U0FBL0IsYUFBYTtHQUFTLFNBQVM7O1FBQS9CLGFBQWEsR0FBYixhQUFhO0lBTWIsY0FBYyxjQUFTLFNBQVM7TUFBaEMsY0FBYyxHQUNkLFNBREEsY0FBYyxDQUNiLElBQUksRUFBRTtBQURnQixBQUVoQyxhQUZ5QyxZQUVuQyxJQUFJLEVBQUUsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ2xDOztXQUhVLGNBQWMsRUFBUyxTQUFTOztTQUFoQyxjQUFjO0dBQVMsU0FBUzs7UUFBaEMsY0FBYyxHQUFkLGNBQWM7SUFNZCxrQkFBa0IsY0FBUyxTQUFTO01BQXBDLGtCQUFrQixHQUNsQixTQURBLGtCQUFrQixDQUNqQixJQUFJLEVBQUU7QUFEb0IsQUFFcEMsYUFGNkMsWUFFdkMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztHQUN0Qzs7V0FIVSxrQkFBa0IsRUFBUyxTQUFTOztTQUFwQyxrQkFBa0I7R0FBUyxTQUFTOztRQUFwQyxrQkFBa0IsR0FBbEIsa0JBQWtCIiwiZmlsZSI6InNyYy9yZWZlcmVuY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE0IFNoYXBlIFNlY3VyaXR5LCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKVxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGNsYXNzIEFjY2Vzc2liaWxpdHkge1xuICBjb25zdHJ1Y3Rvcihpc1JlYWQsIGlzV3JpdGUpIHtcbiAgICB0aGlzLmlzUmVhZCA9ICEhaXNSZWFkO1xuICAgIHRoaXMuaXNXcml0ZSA9ICEhaXNXcml0ZTtcbiAgICB0aGlzLmlzUmVhZFdyaXRlID0gISEoaXNSZWFkICYmIGlzV3JpdGUpO1xuICB9XG59XG5cbkFjY2Vzc2liaWxpdHkuUkVBRCA9IG5ldyBBY2Nlc3NpYmlsaXR5KHRydWUsIGZhbHNlKTtcbkFjY2Vzc2liaWxpdHkuV1JJVEUgPSBuZXcgQWNjZXNzaWJpbGl0eShmYWxzZSwgdHJ1ZSk7XG5BY2Nlc3NpYmlsaXR5LlJFQURXUklURSA9IG5ldyBBY2Nlc3NpYmlsaXR5KHRydWUsIHRydWUpO1xuXG5jbGFzcyBSZWZlcmVuY2Uge1xuICBjb25zdHJ1Y3Rvcihub2RlLCBhY2Nlc3NpYmlsaXR5KSB7XG4gICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICB0aGlzLmFjY2Vzc2liaWxpdHkgPSBhY2Nlc3NpYmlsaXR5O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZWFkUmVmZXJlbmNlIGV4dGVuZHMgUmVmZXJlbmNlIHtcbiAgY29uc3RydWN0b3Iobm9kZSkge1xuICAgIHN1cGVyKG5vZGUsIEFjY2Vzc2liaWxpdHkuUkVBRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFdyaXRlUmVmZXJlbmNlIGV4dGVuZHMgUmVmZXJlbmNlIHtcbiAgY29uc3RydWN0b3Iobm9kZSkge1xuICAgIHN1cGVyKG5vZGUsIEFjY2Vzc2liaWxpdHkuV1JJVEUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZWFkV3JpdGVSZWZlcmVuY2UgZXh0ZW5kcyBSZWZlcmVuY2Uge1xuICBjb25zdHJ1Y3Rvcihub2RlKSB7XG4gICAgc3VwZXIobm9kZSwgQWNjZXNzaWJpbGl0eS5SRUFEV1JJVEUpO1xuICB9XG59XG4iXX0=