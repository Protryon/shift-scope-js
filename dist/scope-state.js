"use strict";

var MultiMap = require("multimap");

function merge(multiMap, otherMultiMap) {
  otherMultiMap.forEachEntry(function (v, k) {
    multiMap.set.apply(multiMap, [k].concat(v));
  });
  return multiMap;
}

var Scope = require("./scope").Scope;
var GlobalScope = require("./scope").GlobalScope;
var ScopeType = require("./scope").ScopeType;
var Variable = require("./variable")["default"];


function resolveArguments(freeIdentifiers, variables) {
  var args = freeIdentifiers.get("arguments") || [];
  freeIdentifiers["delete"]("arguments");
  return variables.concat(new Variable("arguments", args, []));
}

function resolveDeclarations(freeIdentifiers, decls, variables) {
  decls.forEachEntry(function (declarations, name) {
    var references = freeIdentifiers.get(name) || [];
    variables = variables.concat(new Variable(name, references, declarations));
    freeIdentifiers["delete"](name);
  });
  return variables;
}

var ScopeState = (function () {
  var ScopeState = function ScopeState(freeIdentifiers, functionScopedDeclarations, blockScopedDeclarations, children, dynamic) {
    this.freeIdentifiers = freeIdentifiers;
    this.functionScopedDeclarations = functionScopedDeclarations;
    this.blockScopedDeclarations = blockScopedDeclarations;
    this.children = children;
    this.dynamic = dynamic;
  };

  ScopeState.empty = function () {
    return new ScopeState(new MultiMap(), new MultiMap(), new MultiMap(), [], false);
  };

  ScopeState.prototype.concat = function (b) {
    if (this === b) {
      return this;
    }
    return new ScopeState(merge(merge(new MultiMap(), this.freeIdentifiers), b.freeIdentifiers), merge(merge(new MultiMap(), this.functionScopedDeclarations), b.functionScopedDeclarations), merge(merge(new MultiMap(), this.blockScopedDeclarations), b.blockScopedDeclarations), this.children.concat(b.children), this.dynamic || b.dynamic);
  };

  ScopeState.prototype.addDeclaration = function (decl) {
    var declMap = new MultiMap();
    merge(declMap, decl.type.isBlockScoped ? this.blockScopedDeclarations : this.functionScopedDeclarations);
    declMap.set(decl.node.name, decl);
    return new ScopeState(this.freeIdentifiers, decl.type.isBlockScoped ? this.functionScopedDeclarations : declMap, decl.type.isBlockScoped ? declMap : this.blockScopedDeclarations, this.children, this.dynamic);
  };

  ScopeState.prototype.addReference = function (ref) {
    var freeMap = new MultiMap();
    merge(freeMap, this.freeIdentifiers);
    freeMap.set(ref.node.name, ref);
    return new ScopeState(freeMap, this.functionScopedDeclarations, this.blockScopedDeclarations, this.children, this.dynamic);
  };

  ScopeState.prototype.taint = function () {
    return new ScopeState(this.freeIdentifiers, this.functionScopedDeclarations, this.blockScopedDeclarations, this.children, true);
  };

  ScopeState.prototype.finish = function (astNode, scopeType) {
    var variables = [];
    var functionScope = new MultiMap();
    var freeIdentifiers = new MultiMap();

    merge(freeIdentifiers, this.freeIdentifiers);

    switch (scopeType) {
      case ScopeType.BLOCK:
      case ScopeType.CATCH:
      case ScopeType.WITH:
        // resolve references to only block-scoped free declarations
        variables = resolveDeclarations(freeIdentifiers, this.blockScopedDeclarations, variables);
        merge(functionScope, this.functionScopedDeclarations);
        break;
      default:
        // resolve references to both block-scoped and function-scoped free declarations
        if (scopeType === ScopeType.FUNCTION) {
          variables = resolveArguments(freeIdentifiers, variables);
        }
        variables = resolveDeclarations(freeIdentifiers, this.blockScopedDeclarations, variables);
        variables = resolveDeclarations(freeIdentifiers, this.functionScopedDeclarations, variables);
        break;
    }

    var scope = scopeType === ScopeType.GLOBAL ? new GlobalScope(this.children, variables, freeIdentifiers, astNode) : new Scope(this.children, variables, freeIdentifiers, scopeType, this.dynamic, astNode);

    return new ScopeState(freeIdentifiers, functionScope, new MultiMap(), [scope], false);
  };

  return ScopeState;
})();

exports["default"] = ScopeState;
//# sourceMappingURL=data:application/json;base64,