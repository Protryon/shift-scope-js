"use strict";

var Map = require("es6-map");

var MultiMap = require("multimap");

MultiMap.Map = Map;

var Scope = require("./scope").Scope;
var GlobalScope = require("./scope").GlobalScope;
var ScopeType = require("./scope").ScopeType;
var Variable = require("./variable")["default"];


MultiMap.prototype.merge = function merge(otherMultiMap) {
  var _this = this;
  otherMultiMap.forEachEntry(function (v, k) {
    _this.set.apply(_this, [k].concat(v));
  });
  return this;
};

function resolveArguments(freeIdentifiers, variables) {
  var args = freeIdentifiers.get("arguments") || [];
  freeIdentifiers["delete"]("arguments");
  return variables.concat(new Variable("arguments", args, []));
}

function resolveDeclarations(freeIdentifiers, decls, variables) {
  decls.forEachEntry(function (declarations, name) {
    var references = freeIdentifiers.get(name) || [];
    variables = variables.concat(new Variable(name, references, declarations));
    freeIdentifiers["delete"](name);
  });
  return variables;
}

var ScopeState = (function () {
  var ScopeState = function ScopeState(freeIdentifiers, functionScopedDeclarations, blockScopedDeclarations, children, dynamic) {
    this.freeIdentifiers = freeIdentifiers;
    this.functionScopedDeclarations = functionScopedDeclarations;
    this.blockScopedDeclarations = blockScopedDeclarations;
    this.children = children;
    this.dynamic = dynamic;
  };

  ScopeState.empty = function () {
    return new ScopeState(new MultiMap(), new MultiMap(), new MultiMap(), [], false);
  };

  ScopeState.prototype.concat = function (b) {
    if (this === b) {
      return this;
    }
    return new ScopeState((new MultiMap()).merge(this.freeIdentifiers).merge(b.freeIdentifiers), (new MultiMap()).merge(this.functionScopedDeclarations).merge(b.functionScopedDeclarations), (new MultiMap()).merge(this.blockScopedDeclarations).merge(b.blockScopedDeclarations), this.children.concat(b.children), this.dynamic || b.dynamic);
  };

  ScopeState.prototype.addDeclaration = function (decl) {
    var declMap = new MultiMap();
    declMap.merge(decl.type.isBlockScoped ? this.blockScopedDeclarations : this.functionScopedDeclarations);
    declMap.set(decl.node.name, decl);
    return new ScopeState(this.freeIdentifiers, decl.type.isBlockScoped ? this.functionScopedDeclarations : declMap, decl.type.isBlockScoped ? declMap : this.blockScopedDeclarations, this.children, this.dynamic);
  };

  ScopeState.prototype.addReference = function (ref) {
    var freeMap = new MultiMap();
    freeMap.merge(this.freeIdentifiers);
    freeMap.set(ref.node.name, ref);
    return new ScopeState(freeMap, this.functionScopedDeclarations, this.blockScopedDeclarations, this.children, this.dynamic);
  };

  ScopeState.prototype.taint = function () {
    return new ScopeState(this.freeIdentifiers, this.functionScopedDeclarations, this.blockScopedDeclarations, this.children, true);
  };

  ScopeState.prototype.finish = function (astNode, scopeType) {
    var variables = [];
    var functionScope = new MultiMap();
    var freeIdentifiers = new MultiMap();

    freeIdentifiers.merge(this.freeIdentifiers);

    switch (scopeType) {
      case ScopeType.BLOCK:
      case ScopeType.CATCH:
      case ScopeType.WITH:
        // resolve references to only block-scoped free declarations
        variables = resolveDeclarations(freeIdentifiers, this.blockScopedDeclarations, variables);
        functionScope.merge(this.functionScopedDeclarations);
        break;
      default:
        // resolve references to both block-scoped and function-scoped free declarations
        if (scopeType === ScopeType.FUNCTION) {
          variables = resolveArguments(freeIdentifiers, variables);
        }
        variables = resolveDeclarations(freeIdentifiers, this.blockScopedDeclarations, variables);
        variables = resolveDeclarations(freeIdentifiers, this.functionScopedDeclarations, variables);
        break;
    }

    var scope = scopeType === ScopeType.GLOBAL ? new GlobalScope(this.children, variables, freeIdentifiers, astNode) : new Scope(this.children, variables, freeIdentifiers, scopeType, this.dynamic, astNode);

    return new ScopeState(freeIdentifiers, functionScope, new MultiMap(), [scope], false);
  };

  return ScopeState;
})();

exports["default"] = ScopeState;
//# sourceMappingURL=data:application/json;base64,