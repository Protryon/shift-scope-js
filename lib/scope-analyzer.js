"use strict";

var _extends = function (child, parent) {
  child.prototype = Object.create(parent.prototype, {
    constructor: {
      value: child,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  child.__proto__ = parent;
};

var reduce = require("shift-reducer")["default"];
var MonoidalReducer = require("shift-reducer").MonoidalReducer;
var ScopeState = require("./scope-state")["default"];
var ReadReference = require("./reference").ReadReference;
var WriteReference = require("./reference").WriteReference;
var ReadWriteReference = require("./reference").ReadWriteReference;
var Declaration = require("./declaration").Declaration;
var VarDeclaration = require("./declaration").VarDeclaration;
var ConstDeclaration = require("./declaration").ConstDeclaration;
var LetDeclaration = require("./declaration").LetDeclaration;
var CatchDeclaration = require("./declaration").CatchDeclaration;
var ParameterDeclaration = require("./declaration").ParameterDeclaration;
var FunctionNameDeclaration = require("./declaration").FunctionNameDeclaration;
var ScopeType = require("./scope").ScopeType;
var ScopeAnalyzer = (function (MonoidalReducer) {
  var ScopeAnalyzer = function ScopeAnalyzer() {
    MonoidalReducer.call(this, ScopeState);
  };

  _extends(ScopeAnalyzer, MonoidalReducer);

  ScopeAnalyzer.analyze = function (script) {
    return reduce(new this(), script).children[0];
  };

  ScopeAnalyzer.prototype.reduceAssignmentExpression = function (node, binding, expression) {
    if (node.binding.type === "IdentifierExpression") {
      var ReferenceCtor = node.operator === "=" ? WriteReference : ReadWriteReference;
      return expression.addReference(new ReferenceCtor(node.binding.identifier));
    }
    return MonoidalReducer.prototype.reduceAssignmentExpression.call(this, node, binding, expression);
  };

  ScopeAnalyzer.prototype.reduceBlock = function (node, statements) {
    var s = MonoidalReducer.prototype.reduceBlock.call(this, node, statements);
    if (s.blockScopedDeclarations.size > 0) {
      s = s.finish(node, ScopeType.BLOCK);
    }
    return s;
  };

  ScopeAnalyzer.prototype.reduceCallExpression = function (node, callee, args) {
    var s = MonoidalReducer.prototype.reduceCallExpression.call(this, node, callee, args);
    if (node.callee.type === "IdentifierExpression" && node.callee.identifier.name === "eval") {
      return s.taint();
    }
    return s;
  };

  ScopeAnalyzer.prototype.reduceCatchClause = function (node, binding, body) {
    return MonoidalReducer.prototype.reduceCatchClause.call(this, node, binding, body).addDeclaration(new CatchDeclaration(node.binding)).finish(node, ScopeType.CATCH);
  };

  ScopeAnalyzer.prototype.reduceForInStatement = function (node, left, right, body) {
    if (node.left.type === "IdentifierExpression") {
      return this.append(right, body).addReference(new WriteReference(node.left.identifier));
    } else {
      // node.left.type === "VariableDeclaration"
      var declarator = node.left.declarators[0];
      if (declarator.init == null) {
        left = left.addReference(new WriteReference(declarator.binding));
      }
      if (left.blockScopedDeclarations.size > 0) {
        return this.append(this.append(left, body).finish(node, ScopeType.BLOCK), right);
      }
      return MonoidalReducer.prototype.reduceForInStatement.call(this, node, left, right, body);
    }
  };

  ScopeAnalyzer.prototype.reduceForStatement = function (node, init, test, update, body) {
    if (node.init.type === "VariableDeclaration" && init.blockScopedDeclarations.size > 0) {
      return this.append3(this.append(init, body).finish(node, ScopeType.BLOCK), test, update);
    }
    return MonoidalReducer.prototype.reduceForStatement.call(this, node, init, test, update, body);
  };

  ScopeAnalyzer.prototype.reduceFunctionDeclaration = function (node, name, parameters, functionBody) {
    return node.parameters.reduce(function (s, p) {
      return s.addDeclaration(new ParameterDeclaration(p));
    }, functionBody).finish(node, ScopeType.FUNCTION).addDeclaration(new FunctionNameDeclaration(node.name));
  };

  ScopeAnalyzer.prototype.reduceFunctionExpression = function (node, name, parameters, functionBody) {
    var s = node.parameters.reduce(function (s, p) {
      return s.addDeclaration(new ParameterDeclaration(p));
    }, functionBody).finish(node, ScopeType.FUNCTION);
    if (name != null) {
      s = s.addDeclaration(new FunctionNameDeclaration(node.name)).finish(node, ScopeType.FUNCTION_NAME);
    }
    return s;
  };

  ScopeAnalyzer.prototype.reduceGetter = function (node, name, body) {
    return body.finish(node, ScopeType.FUNCTION);
  };

  ScopeAnalyzer.prototype.reduceIdentifierExpression = function (node, identifier) {
    return this.identity.addReference(new ReadReference(node.identifier));
  };

  ScopeAnalyzer.prototype.reducePostfixExpression = function (node, operand) {
    if (node.operand.type === "IdentifierExpression") {
      return this.identity.addReference(new ReadWriteReference(node.operand.identifier));
    }
    return operand;
  };

  ScopeAnalyzer.prototype.reducePrefixExpression = function (node, operand) {
    if ((node.operator === "--" || node.operator === "++") && node.operand.type === "IdentifierExpression") {
      return this.identity.addReference(new ReadWriteReference(node.operand.identifier));
    }
    return operand;
  };

  ScopeAnalyzer.prototype.reduceScript = function (node, body) {
    return body.finish(node, ScopeType.GLOBAL);
  };

  ScopeAnalyzer.prototype.reduceSetter = function (node, name, parameter, body) {
    return body.addDeclaration(new ParameterDeclaration(node.parameter)).finish(node, ScopeType.FUNCTION);
  };

  ScopeAnalyzer.prototype.reduceVariableDeclaration = function (node, declarators) {
    return node.declarators.reduce(function (s, d) {
      return s.addDeclaration(Declaration.fromVarDeclKind(d.binding, node.kind));
    }, MonoidalReducer.prototype.reduceVariableDeclaration.call(this, node, declarators));
  };

  ScopeAnalyzer.prototype.reduceVariableDeclarator = function (node, binding, init) {
    var s = MonoidalReducer.prototype.reduceVariableDeclarator.call(this, node, binding, init);
    if (init != null) {
      s = s.addReference(new WriteReference(node.binding));
    }
    return s;
  };

  ScopeAnalyzer.prototype.reduceWithStatement = function (node, object, body) {
    return MonoidalReducer.prototype.reduceWithStatement.call(this, node, object, body.finish(node, ScopeType.WITH));
  };

  return ScopeAnalyzer;
})(MonoidalReducer);

exports["default"] = ScopeAnalyzer;
//# sourceMappingURL=data:application/json;base64,